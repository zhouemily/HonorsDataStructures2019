#BlueJ class context
comment0.target=Expressions
comment0.text=\n\ A\ class\ that\ practic\ using\ Stack.\n\ \n\ @author\ Emily\ Zhou\n\ @version\ 11/07/2018\n
comment1.params=expression
comment1.target=boolean\ matchParenthesis(java.lang.String)
comment1.text=\ \n\ parenthesis\ matching\ \:\ An\ expression\ is\ said\ to\ be\ balanced\ if\n\ every\ opener\ has\ a\ corresponding\ closer,\ in\ the\ right\ order\n\ {,\ [\ or\ (\ are\ the\ only\ types\ of\ brackets\ allowed\n\ \ \ \ \ \n\ @param\ \ \ expression\ containing\ operands\ operators\ \n\ \ \ \ \ \ \ \ \ and\ any\ of\ the\ 3\ supportedbrackets\n\ @return\ \ true\ is\ the\ parenthesis\ are\ balanced\ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \ false\ otherwise\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment11.params=expr\ expect
comment11.target=void\ test(java.lang.String,\ double)
comment12.params=ex\ expected
comment12.target=void\ testBalanced(java.lang.String,\ boolean)
comment2.params=c
comment2.target=boolean\ isOpenBracket(java.lang.String)
comment2.text=\n\ Helper\ method\ to\ see\ if\ a\ given\ string\ is\ an\ open\ bracket.\n\ \n\ @param\ c\ the\ string\ to\ check\n\ @return\ true\ if\ it\ is\ an\ open\ bracket\ otherwise\ false\n
comment3.params=c
comment3.target=boolean\ isCloseBracket(java.lang.String)
comment3.text=\n\ Helper\ method\ to\ see\ if\ a\ given\ string\ is\ a\ close\ bracket.\n\ \n\ @param\ c\ the\ string\ to\ check\n\ @return\ true\ if\ it\ is\ a\ close\ bracket\ otherwise\ false\n
comment4.params=c1\ c2
comment4.target=boolean\ isPairBracket(java.lang.String,\ java.lang.String)
comment4.text=\n\ Helper\ method\ to\ see\ if\ the\ first\ string\ is\ an\ open\ bracket\n\ and\ the\ second\ string\ is\ the\ corresponding\ close\ bracket.\n\ \n\ @param\ c1\ the\ first\ string\n\ @param\ c2\ the\ second\ string\n\ @return\ true\ if\ the\ given\ 2\ strings\ are\ a\ pair\ of\ brackets\n
comment5.params=expr
comment5.target=java.lang.String\ infixToPostfix(java.lang.String)
comment5.text=\ \n\ returns\ a\ string\ in\ postfix\ form\ \n\ if\ given\ an\ expression\ in\ infix\ form\ as\ a\ parameter\n\ do\ this\ conversion\ using\ a\ Stack\n\ \n\ @param\ expr\ valid\ expression\ in\ infix\ form\n\ @return\ equivalent\ expression\ in\ postfix\ form\n
comment6.params=c
comment6.target=boolean\ isOperator(char)
comment7.params=op
comment7.target=int\ getPrecedenceLevel(char)
comment7.text=\n\ Get\ precedence\ of\ an\ operator\n
comment8.params=expr
comment8.target=double\ evalPostfix(java.lang.String)
comment8.text=\n\ returns\ the\ value\ of\ an\ expression\ in\ postfix\ form\n\ do\ this\ computation\ using\ a\ Stack\n\ \n\ @param\ expr\ valid\ expression\ in\ postfix\ form\n\ @return\ value\ of\ the\ expression\n\ @precondition\ postfix\ expression\ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ contains\ numbers\ and\ operators\ +\ -\ *\ /\ and\ %\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ and\ that\ operands\ and\ operators\ are\ separated\ by\ spaces\n
comment9.params=op\ operand1\ operand2
comment9.target=int\ compute(char,\ int,\ int)
numComments=13
