#BlueJ class context
comment0.target=Main
comment0.text=\n\ A\ program\ that\ exercises\ and\ tests\ Heap\ operations.\n\ \n\ The\ test\ checks\ the\ heap\ built\ meets\ the\ Heap\ property,\n\ insert\ and\ remove\ item\ as\ expected\ and\ compares\ heap\n\ sort\ result\ with\ Java\ Collections.sort().\n\n\ @author\ Emily\ Zhou\n\ @version\ 01-08-2019\n\ @since\ 12-16-2018\n
comment1.params=heap\ heapSize
comment1.target=void\ testBuildHeap(java.lang.Comparable[],\ int)
comment1.text=\n\ Test\ buildHeap().\n\ -\ first\ build\ the\ heap\n\ -\ check\ the\ result\ heap\ has\ the\ Max\ Heap\ property\n\ \n\ @param\ heap\ the\ array\ that\ contains\ heap\ data\ to\ build\ heap\n\ @param\ heapSize\ the\ number\ of\ elements\ in\ heap\n\ \n\ @throw\ RuntimeException\ if\ test\ fail\n
comment2.params=heap\ item\ heapSize
comment2.target=void\ testInsert(java.lang.Comparable[],\ java.lang.Comparable,\ int)
comment2.text=\n\ Test\ insert().\n\ -\ first\ build\ the\ heap\n\ -\ check\ the\ result\ heap\ has\ the\ Max\ Heap\ property\n\ -\ insert\ the\ item\ to\ the\ heap\n\ -\ check\ the\ result\ heap\ contains\ the\ item\n\ -\ check\ the\ result\ heap\ has\ the\ Max\ Heap\ property\n\ \n\ @param\ heap\ the\ array\ that\ contains\ heap\ data\ to\ build\ heap\n\ @param\ heapSize\ the\ number\ of\ elements\ in\ heap\n\ \n\ @throw\ RuntimeException\ if\ test\ fail\n
comment3.params=heap\ heapSize
comment3.target=void\ testRemove(java.lang.Comparable[],\ int)
comment3.text=\n\ Test\ remove().\n\ -\ first\ build\ the\ heap\n\ -\ remove\ 1\ item\ from\ the\ heap\n\ -\ check\ the\ removed\ item\ has\ expected\ value\n\ -\ check\ the\ remaining\ heap\ still\ has\ the\ Max\ Heap\ property\n\ \n\ @param\ heap\ the\ array\ that\ contains\ heap\ data\n\ @param\ heapSize\ the\ number\ of\ elements\ in\ heap\n\ \n\ @throw\ RuntimeException\ if\ test\ fail\n
comment4.params=heap\ heapSize
comment4.target=void\ testHeapSort(java.lang.Comparable[],\ int)
comment4.text=\n\ Test\ heapSort().\n\ -\ call\ heapSort()\n\ -\ compare\ the\ result\ with\ Java\ Collections.sort()\n\ \n\ @param\ heap\ the\ array\ that\ contains\ heap\ data\n\ @param\ heapSize\ the\ number\ of\ elements\ in\ heap\n\ \n\ @throw\ RuntimeException\ if\ test\ fail\n
comment5.params=heap\ heapSize
comment5.target=boolean\ checkHeapProperty(java.lang.Comparable[],\ int)
comment5.text=\n\ Check\ if\ the\ specified\ heap\ meets\ Max\ Heap\ property.\n\ \n\ It\ uses\ the\ similar\ algorithm\ as\ in\ buildHeap()\ to\ find\n\ all\ non-leaf\ nodes\ to\ compare\ with\ their\ children,\ starting\n\ with\ the\ lowest\ right-most.\n\ \n\ @param\ heap\ the\ heap\ to\ check\n\ @param\ heapSize\ number\ of\ nodes\ in\ heap\n\ @return\ true\ if\ meets\ Max\ Heap\ property\ otherwise\ false\n
comment6.params=
comment6.target=void\ test()
comment6.text=\n\ Test\ odd\ number\ of\ nodes.\n
comment7.params=heapSize
comment7.target=java.lang.Comparable[]\ generateRandom(int)
comment7.text=\n\ Genereate\ an\ array\ of\ Integer\ objects\ with\ random\ values\n\ in\ range\ of\ [1,\ 100),\ starting\ at\ index\ 0.\n\ \n\ @param\ heapSize\ is\ the\ size\ of\ the\ array\ -\ 1\n\ @return\ the\ generated\ array\n
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=\n\ \ The\ entry\ method\ to\ run\ the\ program.\ \n\ \ \n\ \ @param\ args\ command\ line\ arguments,\ not\ expect\ any\n
numComments=9
