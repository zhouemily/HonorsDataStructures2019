#BlueJ class context
comment0.target=TreeDisplay
comment0.text=\n\ A\ graphical\ component\ for\ displaying\ the\ contents\ of\ a\ binary\ tree.\n\ The\ following\ methods\ are\ designed\ for\ interacting\ with\ the\ display\:\n\ \ \ \ \ \ Default\ constructor\ TreeDisplay()\n\ \ \ \ \ \ displayTree(TreeNode\ someTree)\n\ \ \ \ \ \ visit(TreeNode\ someNode)\n\ The\ displayTree\ method\ creates\ the\ initial\ display\ of\ the\ tree.\n\ It\ clears\ the\ component\ and\ paints\ the\ tree\n\ The\ visit\ method\ changes\ the\ background\ color\ of\n\ the\ node\ defined\ in\ the\ parameter.\n\ sample\ Useage\:\n\ TreeDisplay\ display\ \=\ new\ TreeDisplay();\n\ display.displayTree(someTree);\n\ display.visit(someNode);\n\ \n\ @author\ DaveF\n\ @author\ RichardP\n\ @version\ 102613\n\n
comment1.params=rt
comment1.target=void\ displayTree(TreeNode)
comment1.text=\n\ creates\ a\ frame\ with\ a\ new\ TreeDisplay\ component.\n\ constructor\ returns\ the\ TreeDisplay\ component--not\ the\ frame).\n\ /\n\ \ \ \ public\ TreeDisplay()\n\ \ \ \ {\n\ \ \ \ //tester\ \=\ null;\n\ \ \ \ //create\ surrounding\ frame\n\ \ \ \ JFrame\ frame\ \=\ new\ JFrame("Tree\ Display");\n\ \ \ \ frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n\ \ \ \ //add\ the\ TreeDisplay\ component\ to\ the\ frame\n\ \ \ \ frame.getContentPane().add(this);\n\n\ \ \ \ //show\ frame\n\ \ \ \ frame.pack();\n\ \ \ \ frame.setVisible(true);\n\n\ \ \ \ java.util.Timer\ timer\ \=\ new\ java.util.Timer();\n\ \ \ \ TimerTask\ task\ \=\ new\ TimerTask()\n\ \ \ \ {\n\ \ \ \ public\ void\ run()\n\ \ \ \ {\n\ \ \ \ TreeDisplay.this.repaint();\n\ \ \ \ }\n\ \ \ \ };\n\ \ \ \ timer.schedule(task,\ 0,\ 1000);\n\ \ \ \ }\n\n\ \ \ \ //tells\ the\ frame\ the\ default\ size\ of\ the\ tree\n\ \ \ \ public\ Dimension\ getPreferredSize()\n\ \ \ \ {\n\ \ \ \ return\ new\ Dimension(400,\ 300);\n\ \ \ \ }\n\n\ \ \ \ //called\ whenever\ the\ TreeDisplay\ must\ be\ drawn\ on\ the\ screen\n\ \ \ \ public\ void\ paint(Graphics\ g)\n\ \ \ \ {\n\ \ \ \ Graphics2D\ g2\ \=\ (Graphics2D)g;\n\ \ \ \ Dimension\ d\ \=\ getSize();\n\n\ \ \ \ //draw\ white\ background\n\ \ \ \ g2.setPaint(Color.white);\n\ \ \ \ g2.fill(new\ Rectangle2D.Double(0,\ 0,\ d.width,\ d.height));\n\n\ \ \ \ int\ depth\ \=\ TreeUtil.maxDepth(root);\n\n\ \ \ \ if\ (depth\ \=\=\ 0)\n\ \ \ \ //no\ tree\ to\ draw\n\ \ \ \ return;\n\n\ \ \ \ //hack\ to\ avoid\ division\ by\ zero,\ if\ only\ one\ level\ in\ tree\n\ \ \ \ if\ (depth\ \=\=\ 1)\n\ \ \ \ depth\ \=\ 2;\n\n\ \ \ \ //compute\ the\ size\ of\ the\ text\n\ \ \ \ FontMetrics\ font\ \=\ g2.getFontMetrics();\n\ \ \ \ int\ leftPad\ \=\ font.stringWidth(\n\ \ \ \ TreeUtil.leftmost(root)\ +\ "")\ /\ 2;\n\ \ \ \ int\ rightPad\ \=\ font.stringWidth(\n\ \ \ \ TreeUtil.rightmost(root)\ +\ "")\ /\ 2;\n\ \ \ \ int\ textHeight\ \=\ font.getHeight();\n\n\ \ \ \ //draw\ the\ actual\ tree\n\ \ \ \ drawTree(g2,\ root,\ leftPad\ +\ ARC_PAD,\n\ \ \ \ d.width\ -\ rightPad\ -\ ARC_PAD,\n\ \ \ \ textHeight\ /\ 2\ +\ ARC_PAD,\n\ \ \ \ (d.height\ -\ textHeight\ -\ 2\ *\ ARC_PAD)\ /\ (depth\ -\ 1));\n\ \ \ \ }\n\n\ \ \ \ //draws\ the\ tree,\ starting\ from\ the\ given\ node,\n\ \ \ \ //in\ the\ region\ with\ x\ values\ ranging\n\ \ \ \ //from\ minX\ to\ maxX,\ with\ y\ value\ beginning\ at\ y,\n\ \ \ \ //and\ next\ level\ at\ y\ +\ yIncr.\n\ \ \ \ private\ void\ drawTree(Graphics2D\ g2,\n\ \ \ \ TreeNode\ t,\ int\ minX,\ int\ maxX,\ int\ y,\ int\ yIncr)\n\ \ \ \ {\n\ \ \ \ //skip\ if\ empty\n\ \ \ \ if\ (t\ \=\=\ null)\n\ \ \ \ return;\n\n\ \ \ \ //compute\ useful\ coordinates\n\ \ \ \ int\ x\ \=\ (minX\ +\ maxX)\ /\ 2;\n\ \ \ \ int\ nextY\ \=\ y\ +\ yIncr;\n\n\ \ \ \ //draw\ black\ lines\n\ \ \ \ g2.setPaint(Color.black);\n\ \ \ \ if\ (t.getLeft()\ \!\=\ null)\n\ \ \ \ {\n\ \ \ \ int\ nextX\ \=\ (minX\ +\ x)\ /\ 2;\n\ \ \ \ g2.draw(new\ Line2D.Double(x,\ y,\ nextX,\ nextY));\n\ \ \ \ }\n\ \ \ \ if\ (t.getRight()\ \!\=\ null)\n\ \ \ \ {\n\ \ \ \ int\ nextX\ \=\ (x\ +\ maxX)\ /\ 2;\n\ \ \ \ g2.draw(new\ Line2D.Double(x,\ y,\ nextX,\ nextY));\n\ \ \ \ }\n\n\ \ \ \ //measure\ text\n\ \ \ \ FontMetrics\ font\ \=\ g2.getFontMetrics();\n\ \ \ \ String\ text\ \=\ t.getValue()\ +\ "";\n\ \ \ \ int\ textHeight\ \=\ font.getHeight();\n\ \ \ \ int\ textWidth\ \=\ font.stringWidth(text);\n\n\ \ \ \ //draw\ the\ box\ around\ the\ node\n\ \ \ \ Rectangle2D.Double\ box\ \=\ new\ Rectangle2D.Double(\n\ \ \ \ x\ -\ textWidth\ /\ 2\ -\ ARC_PAD,\ y\ -\ textHeight\ /\ 2\ -\ ARC_PAD,\n\ \ \ \ textWidth\ +\ 2\ *\ ARC_PAD,\ textHeight\ +\ 2\ *\ ARC_PAD);\n\ \ \ \ //,\ ARC_PAD,\ ARC_PAD);\n\ \ \ \ Color\ c;\n\ \ \ \ //color\ depends\ on\ whether\ we\ haven't\ visited,\n\ \ \ \ //are\ visiting,\ or\ have\ visited.\n\ \ \ \ if\ (t\ \=\=\ visiting)\n\ \ \ \ c\ \=\ Color.YELLOW;\n\ \ \ \ else\ if\ (visited.contains(t))\n\ \ \ \ c\ \=\ Color.ORANGE;\n\ \ \ \ else\n\ \ \ \ c\ \=\ new\ Color(187,\ 224,\ 227);\n\ \ \ \ g2.setPaint(c);\n\ \ \ \ g2.fill(box);\n\ \ \ \ //draw\ black\ border\n\ \ \ \ g2.setPaint(Color.black);\n\ \ \ \ g2.draw(box);\n\n\ \ \ \ //draw\ text\n\ \ \ \ g2.drawString(text,\ x\ -\ textWidth\ /\ 2,\ y\ +\ textHeight\ /\ 2);\n\n\ \ \ \ //draw\ children\n\ \ \ \ drawTree(g2,\ t.getLeft(),\ minX,\ x,\ nextY,\ yIncr);\n\ \ \ \ drawTree(g2,\ t.getRight(),\ x,\ maxX,\ nextY,\ yIncr);\n\ \ \ \ }\n\n\ \ \ \ /**\n\ displayTree\ tells\ the\ component\ to\ switch\ to\ displaying\ the\ given\ tree\n\ @param\ rt\ is\ the\ root\ of\ the\ tree\ to\ display\n\ postcondition\:\ the\ component\ displays\ the\ tree\ defined\ by\ root\n
comment2.params=t
comment2.target=void\ visit(TreeNode)
comment2.text=\n\ visit\ changes\ the\ background\ color\ of\n\ the\ node\ given\ in\ the\ parameter\ to\ yellow,\n\ lighting\ up\ the\ node\ to\ indicate\ we\ are\ visiting\ it.\n\ @param\ t\ the\ node\ to\ light\ up\n\ postcondition\:\ the\ background\ color\ on\ the\ display\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ the\ selected\ node\ is\ changed\ to\ yellow\n
comment3.params=d
comment3.target=void\ setDelay(int)
comment3.text=\n\ change\ the\ length\ of\ time\ in\ milliseconds\n\ to\ pause\ when\ visiting\ a\ node.\n
numComments=4
