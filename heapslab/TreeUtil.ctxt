#BlueJ class context
comment0.target=TreeUtil
comment0.text=\n\ TreeUtil\ contains\ the\ following\ methods\ for\ manipulating\ binary\ trees.\n\ \n\ leftmost\ -\ find\ the\ left\ most\ node\ \n\ rightmost\ -\ find\ the\ right\ most\ node\n\ maxDepth\ \ -\ compute\ max\ depth\n\ countNodes\ -\ count\ total\ number\ of\ nodes\n\ countLeaves\ -\ count\ total\ number\ of\ leaf\ nodes\n\ preOrder\ -\ preorder\ traverse\n\ inOrder\ \ -\ inorder\ traverse\n\ postOrder\ -\ postorder\ traverse\n\ fillList\ -\ fill\ node\ values\ to\ a\ list\n\ saveTree\ -\ save\ a\ tree\ to\ a\ file\n\ buildTree\ -\ build\ a\ tree\ of\ a\ list\ iterator\ of\ node\ values\n\ loadTree\ -\ restore\ a\ tree\ from\ a\ file\n\ copy\ -\ copy\ a\ tree\ to\ a\ new\ tree\n\ sameShape\ -\ check\ if\ 2\ trees\ have\ the\ same\ shape\n\ createRandom\ -\ creates\ a\ random\ tree\ of\ the\ specified\ depth\n\ createDecodingTree\ -\ creates\ a\ morse\ code\ decoding\ tree\n\ decodeMorse\ -\ decode\ morse\ code\n\ (to\ be\ continued)\n\ \n\ @author\ Emily\ Zhou\n\ @since\ 11-29-2018\n\ @version\ 01-13-2019\n\n
comment1.params=t
comment1.target=java.lang.Object\ leftmost(TreeNode)
comment1.text=\n\ Get\ the\ value\ of\ the\ left\ most\ node\ in\ a\ given\ tree.\n\ \n\ @precondition\ the\ root\ node\ of\ given\ tree\ must\ not\ be\ null\n\ @param\ t\ the\ root\ node\ of\ the\ given\ tree\n\ @return\ the\ value\ of\ left\ most\ node\n
comment10.params=t\ list
comment10.target=void\ fillList(TreeNode,\ java.util.List)
comment10.text=\n\ Preorder\ traverse\ the\ given\ tree\ and\ fill\ in\n\ each\ node\ value\ as\ element\ to\ the\ provided\ list\n\ and\ treat\ null\ node\ as\ having\ value\ "$".\n\ \n\ @param\ t\ the\ given\ tree\n\ @param\ list\ the\ provided\ list\ to\ fill\ in\n
comment11.params=fileName\ t
comment11.target=void\ saveTree(java.lang.String,\ TreeNode)
comment11.text=\n\ Use\ the\ FileUtil\ utility\ class\ to\ save\ the\ tree\ rooted\ at\ t\n\ as\ a\ file\ with\ the\ given\ file\ name.\n\ \n\ @param\ fileName\ is\ the\ name\ of\ the\ file\ to\ create\ which\n\ \ \ \ \ \ \ \ will\ hold\ the\ data\ values\ in\ the\ tree\n\ @param\ t\ is\ the\ root\ of\ the\ tree\ to\ save\n
comment12.params=it
comment12.target=TreeNode\ buildTree(java.util.Iterator)
comment12.text=\n\ Build\ the\ tree\ with\ the\ given\ iterator\ to\ iterate\ through\n\ a\ valid\ description\ of\ a\ binary\ tree\ with\ String\ values.\n\ \n\ Null\ nodes\ are\ indicated\ by\ "$"\ markers\n\ \n\ @param\ it\ the\ iterator\ which\ will\ iterate\ over\ the\ tree\ description\n\ @return\ a\ pointer\ to\ the\ root\ of\ the\ tree\ built\ by\ the\ iteration\n
comment13.params=fileName
comment13.target=TreeNode\ loadTree(java.lang.String)
comment13.text=\n\ Read\ a\ file\ description\ of\ a\ tree\ and\ then\ build\ the\ tree.\n\ \n\ @param\ fileName\ is\ a\ valid\ file\ name\ for\ a\ file\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ describes\ a\ binary\ tree\n\ @return\ a\ pointer\ to\ the\ root\ of\ the\ tree\n
comment14.params=
comment14.target=java.lang.String\ getUserInput()
comment14.text=\n\ Utility\ method\ that\ waits\ for\ a\ user\ to\ type\ text\n\ into\ Std\ Input\ and\ then\ press\ enter.\n\ @return\ the\ string\ entered\ by\ the\ user\n
comment15.params=t\ display
comment15.target=void\ twentyQuestionsRound(TreeNode,\ TreeDisplay)
comment15.text=\n\ Plays\ a\ single\ round\ of\ 20\ questions\n\ postcondition\:\ \ plays\ a\ round\ of\ twenty\ questions,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ asking\ the\ user\ questions\ as\ it\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ walks\ down\ the\ given\ knowledge\ tree,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ lighting\ up\ the\ display\ as\ it\ goes;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ modifies\ the\ tree\ to\ include\ information\ learned.\n\ @param\ t\ a\ pointer\ to\ the\ root\ of\ the\ game\ tree\n\ @param\ display\ which\ will\ show\ the\ progress\ of\ the\ game\n
comment16.params=
comment16.target=void\ twentyQuestions()
comment16.text=\ \n\ Plays\ a\ game\ of\ 20\ questions\n\ Begins\ by\ reading\ in\ a\ starting\ file\ and\ then\ plays\ multiple\ rounds\n\ until\ the\ user\ enters\ "quit".\ \ Then\ the\ final\ tree\ is\ saved\n
comment17.params=t
comment17.target=TreeNode\ copy(TreeNode)
comment17.text=\n\ Copy\ a\ binary\ tree.\n\ \n\ @param\ t\ the\ root\ of\ the\ tree\ to\ copy\n\ @return\ a\ new\ tree,\ which\ is\ a\ complete\ copy\n\ \ \ \ \ \ \ \ \ of\ t\ with\ all\ new\ TreeNode\ objects\n\ \ \ \ \ \ \ \ \ pointing\ to\ the\ same\ values\ as\ t\ (in\ the\ same\ order,\ shape,\ etc)\n
comment18.params=t1\ t2
comment18.target=boolean\ sameShape(TreeNode,\ TreeNode)
comment18.text=\n\ Tests\ to\ see\ if\ two\ trees\ have\ the\ same\ shape,\ but\ not\ necessarily\ the\n\ same\ values.\ \ Two\ trees\ have\ the\ same\ shape\ if\ they\ have\ TreeNode\ objects\n\ in\ the\ same\ locations\ relative\ to\ the\ root\n\ \n\ @param\ t1\ pointer\ to\ the\ root\ of\ the\ first\ tree\n\ @param\ t2\ pointer\ to\ the\ root\ of\ the\ second\ tree\n\ @return\ true\ if\ t1\ and\ t2\ describe\ trees\ having\ the\ same\ shape,\n\ \ \ \ \ \ \ \ \ false\ otherwise\n
comment19.params=display
comment19.target=TreeNode\ createDecodingTree(TreeDisplay)
comment19.text=\n\ Generate\ a\ tree\ for\ decoding\ Morse\ code.\n\ \n\ @param\ display\ the\ display\ that\ will\ show\ the\ decoding\ tree\n\ @return\ the\ decoding\ tree\n
comment2.params=t
comment2.target=java.lang.Object\ rightmost(TreeNode)
comment2.text=\n\ Get\ the\ value\ of\ the\ right\ most\ node\ in\ a\ given\ tree.\n\ \n\ @precondition\ the\ root\ node\ of\ given\ tree\ must\ not\ be\ null\n\ @param\ t\ the\ root\ node\ of\ the\ given\ tree\n\ @return\ the\ value\ of\ right\ most\ node\n
comment20.params=decodingTree\ letter\ code\ display
comment20.target=void\ insertMorse(TreeNode,\ java.lang.String,\ java.lang.String,\ TreeDisplay)
comment20.text=\n\ Helper\ method\ for\ building\ a\ Morse\ code\ decoding\ tree.\n\ postcondition\:\ \ inserts\ the\ given\ letter\ into\ the\ decodingTree,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ the\ appropriate\ position,\ as\ determined\ by\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Morse\ code\ sequence;\ lights\ up\ the\ display\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ as\ it\ walks\ down\ the\ tree\n\ @param\ decodingTree\ is\ the\ partial\ decoding\ tree\n\ @param\ letter\ is\ the\ letter\ to\ add\n\ @param\ code\ is\ the\ Morse\ code\ for\ letter\n\ @param\ display\ is\ the\ display\ that\ will\ show\ progress\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ as\ the\ method\ walks\ down\ the\ tree\n
comment21.params=decodingTree\ cipherText\ display
comment21.target=java.lang.String\ decodeMorse(TreeNode,\ java.lang.String,\ TreeDisplay)
comment21.text=\n\ Decodes\ Morse\ code\ by\ walking\ the\ decoding\ tree\n\ according\ to\ the\ input\ code.\n\ \n\ @param\ decodingTree\ is\ the\ Morse\ code\ decoding\ tree\n\ @param\ cipherText\ is\ Morse\ code\ consisting\ of\ dots,\ dashes,\ and\ spaces\n\ @param\ display\ is\ the\ display\ object\ that\ will\ show\ the\ decoding\ progress\n\ @return\ the\ string\ represented\ by\ cipherText\n
comment22.params=expTree
comment22.target=int\ eval(TreeNode)
comment22.text=\n\ optional\ work.\n
comment23.params=exp
comment23.target=TreeNode\ createExpressionTree(java.lang.String)
comment23.text=\n\ optional\ work.\n
comment24.params=out
comment24.target=void\ debugPrint(java.lang.String)
comment24.text=\n\ debug\ printout.\n\ postcondition\:\ out\ is\ printed\ to\ System.out\n\ @param\ out\ the\ string\ to\ send\ to\ System.out\n
comment3.params=t
comment3.target=int\ maxDepth(TreeNode)
comment3.text=\n\ Compute\ the\ maximum\ depth\ of\ a\ given\ tree.\n\ \n\ @param\ t\ the\ root\ node\ of\ the\ given\ tree\n\ @return\ the\ maximum\ depth\n
comment4.params=depth
comment4.target=TreeNode\ createRandom(int)
comment4.text=\n\ Create\ a\ random\ tree\ of\ the\ specified\ depth.\n\ No\ attempt\ to\ balance\ the\ tree\ is\ provided.\n\ \n\ @param\ depth\ of\ the\ tree\n\ @return\ TreeNode\ object\ that\ points\ to\ the\ generated\ tree\n
comment5.params=t
comment5.target=int\ countNodes(TreeNode)
comment5.text=\n\ Compute\ the\ number\ nodes\ in\ a\ given\ tree.\n\ \n\ @param\ t\ the\ root\ node\ of\ the\ given\ tree\n\ @return\ the\ number\ nodes\n
comment6.params=t
comment6.target=int\ countLeaves(TreeNode)
comment6.text=\n\ Compute\ the\ number\ of\ leaves\ in\ a\ given\ tree.\n\ \n\ @param\ t\ the\ root\ node\ of\ the\ given\ tree\n\ @return\ the\ number\ of\ leaves\n
comment7.params=t\ display
comment7.target=void\ preOrder(TreeNode,\ TreeDisplay)
comment7.text=\n\ Preorder\ (root,\ left,\ right)\ traverse\ a\ given\ tree.\n\ \n\ @param\ t\ the\ root\ node\ of\ the\ tree\n\ @param\ display\ the\ TreeDisplay\ to\ light\ up\ the\ node\ when\ visited\n
comment8.params=t\ display
comment8.target=void\ inOrder(TreeNode,\ TreeDisplay)
comment8.text=\n\ Inorder\ (left,\ root,\ right)\ traverse\ a\ given\ tree.\n\ \n\ @param\ t\ the\ root\ node\ of\ the\ tree\n\ @param\ display\ the\ TreeDisplay\ to\ light\ up\ the\ node\ when\ visited\n
comment9.params=t\ display
comment9.target=void\ postOrder(TreeNode,\ TreeDisplay)
comment9.text=\n\ Postorder\ (left,\ right,\ root)\ traverse\ a\ given\ tree.\n\ \n\ @param\ t\ the\ root\ node\ of\ the\ tree\n\ @param\ display\ the\ TreeDisplay\ to\ light\ up\ the\ node\ when\ visited\n
numComments=25
